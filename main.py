# Streamlit run main.py  

import streamlit as st
import re
import datetime
import pandas as pd
import json
import os
from itertools import permutations

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit
st.set_page_config(page_title="‡∏Å‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°", layout="wide")

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
total_sales = sum(ticket["‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"] for ticket in st.session_state.get('lotto_data', [])) if 'lotto_data' in st.session_state and st.session_state.lotto_data else 0
st.title(f"üìä  ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total_sales} ‡∏ö‡∏≤‡∏ó")

# CSS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û
st.markdown("""
<style>
    .stDataFrame {
        width: 100%;
        border-collapse: collapse;
        background: #fff;
        border: 1px solid #000;
    }
    .stDataFrame table {
        border: 1px solid #000;
        background-color: #fff;
    }
    .stDataFrame th {
        background-color: #90ee90; /* ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô */
        border: 1px solid #000;
        padding: 8px;
        text-align: center;
        font-weight: bold;
    }
    .stDataFrame td {
        border: 1px solid #000;
        padding: 8px;
        text-align: center;
    }
    .stDataFrame tr:nth-child(even) {
        background-color: #f2f2f2;
    }
    .two-digit-header {
        background-color: #ffa500; /* ‡∏™‡∏µ‡∏™‡πâ‡∏° */
    }
    .three-digit-header {
        background-color: #ff6347; /* ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡πà‡∏≠‡∏ô */
    }
    .table-container {
        display: flex;
        justify-content: space-between;
    }
    .table-section {
        width: 48%;
        border: 1px solid #000;
        padding: 10px;
    }
    .send-table {
        overflow-x: visible; /* ‡πÑ‡∏°‡πà‡∏°‡∏µ scroll bar */
    }
</style>
""", unsafe_allow_html=True)

# --- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ---
today = datetime.date.today()

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å tickets.json ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ
if 'lotto_data' not in st.session_state:
    if os.path.exists("tickets.json"):
        try:
            with open("tickets.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                st.session_state.lotto_data = data if isinstance(data, list) else []
        except (json.JSONDecodeError, FileNotFoundError):
            st.session_state.lotto_data = []
    else:
        st.session_state.lotto_data = []

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÇ‡∏û‡∏¢ ---
def standardize_ticket(text):
    lines = text.strip().splitlines()
    standardized_lines = []
    for line in lines:
        line = line.strip()
        if not line:
            continue

        # ‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å
        line = re.sub(r"\d{1,2}/\d{1,2}/\d{2,4}", "", line).strip()

        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        if re.search(r"‡∏ö‡∏ô-‡πÇ‡∏ï‡πä‡∏î|‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á|‡∏™‡∏≤‡∏¢|‡∏°‡∏π‡πà|‡πÄ‡∏à‡πä", line, re.IGNORECASE):
            continue

        # ‡πÅ‡∏õ‡∏•‡∏á "‡∏¢‡∏≠‡∏î400" ‡πÄ‡∏õ‡πá‡∏ô "‡∏¢‡∏≠‡∏î 400"
        if re.match(r"^‡∏¢‡∏≠‡∏î\d+$", line, re.IGNORECASE):
            match = re.match(r"‡∏¢‡∏≠‡∏î(\d+)", line, re.IGNORECASE)
            amount = match.group(1)
            line = f"‡∏¢‡∏≠‡∏î {amount}"

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç=‡∏à‡∏≥‡∏ô‡∏ß‡∏ô*‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        if re.match(r"(\d+)=(\d+)[√ó+]((\d+))", line):
            match = re.match(r"(\d+)=(\d+)[√ó+]((\d+))", line)
            number, top, bottom = match.groups()[:3]
            line = f"{number}={top}*{bottom}"
        elif re.match(r"(\d+)-(\d+)[√ó+]((\d+))", line):
            match = re.match(r"(\d+)-(\d+)[√ó+]((\d+))", line)
            number, top, bottom = match.groups()[:3]
            line = f"{number}={top}*{bottom}"
        elif re.match(r"(\d+)\s+(\d+)[√ó+]((\d+))", line):
            match = re.match(r"(\d+)\s+(\d+)[√ó+]((\d+))", line)
            number, top, bottom = match.groups()[:3]
            line = f"{number}={top}*{bottom}"
        elif re.match(r"(\d+)-(\d+)\*(\d+)", line):
            match = re.match(r"(\d+)-(\d+)\*(\d+)", line)
            number, top, bottom = match.groups()
            line = f"{number}={top}*{bottom}"
        elif re.match(r"(\d+)=(\d+)-(\d+)\*(\d+)", line):
            match = re.match(r"(\d+)=(\d+)-(\d+)\*(\d+)", line)
            number, top, bottom, todd = match.groups()
            line = f"{number}={top}*{bottom}*{todd}"
        elif re.match(r"(\d+)=(\d+)-(\d+)", line):
            match = re.match(r"(\d+)=(\d+)-(\d+)", line)
            number, top, bottom = match.groups()
            line = f"{number}={top}*{bottom}"
        elif re.match(r"(\d+)\s+(\d+)\*(\d+)", line):
            match = re.match(r"(\d+)\s+(\d+)\*(\d+)", line)
            number, top, bottom = match.groups()
            line = f"{number}={top}*{bottom}"

        standardized_lines.append(line)
    return "\n".join(standardized_lines)

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÇ‡∏û‡∏¢ ---
def parse_tickets(tickets):
    data = []
    for ticket in tickets:
        lines = ticket["‡πÇ‡∏û‡∏¢"].strip().splitlines()
        customer = ticket["‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"]

        for line in lines:
            line = line.strip()
            if not line:
                continue

            if re.search(r"‡∏¢‡∏≠‡∏î|‡∏™‡∏≤‡∏¢|‡∏°‡∏π‡πà|‡πÄ‡∏à‡πä", line, re.IGNORECASE):
                continue

            number = None
            top, bottom, todd = 0, 0, 0

            match2 = re.match(r"^(\d{2,3})=(\d+)\*(\d+)$", line)
            match3 = re.match(r"^(\d{3})=(\d+)\*(\d+)\*(\d+)$", line)

            if match3:
                number, top, todd, bottom = match3.groups()
                top, bottom, todd = int(top), int(bottom), int(todd)
            elif match2:
                number, v1, v2 = match2.groups()
                v1, v2 = int(v1), int(v2)
                if len(number) == 3:
                    top, todd = v1, v2
                else:
                    top, bottom = v1, v2

            if number:
                data.append({
                    "‡πÄ‡∏•‡∏Ç": number,
                    "‡∏ö‡∏ô": top,
                    "‡∏•‡πà‡∏≤‡∏á": bottom,
                    "‡πÇ‡∏ï‡πä‡∏î": todd,
                    "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤": customer
                })

    return data

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ---
def calculate_total(standardized_lines):
    total = 0
    for line in standardized_lines:
        if re.match(r"^(\d+)=(\d+)\*(\d+)$", line):  # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç=‡∏à‡∏≥‡∏ô‡∏ß‡∏ô*‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            match = re.match(r"^(\d+)=(\d+)\*(\d+)$", line)
            if match:
                _, top, bottom = match.groups()
                total += int(top) + int(bottom)
        elif re.match(r"^(\d+)=(\d+)\*(\d+)\*(\d+)$", line):  # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç=‡∏à‡∏≥‡∏ô‡∏ß‡∏ô*‡∏à‡∏≥‡∏ô‡∏ß‡∏ô*‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÇ‡∏ï‡πä‡∏î)
            match = re.match(r"^(\d+)=(\d+)\*(\d+)\*(\d+)$", line)
            if match:
                _, top, bottom, todd = match.groups()
                total += int(top) + int(bottom) + int(todd)
    return total

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏±‡∏ö ---
def generate_six_digit_permutations(number):
    if len(number) != 3:
        return []
    digits = list(number)
    perms = [''.join(p) for p in permutations(digits)]
    return sorted(list(set(perms)))

# --- ‡πÄ‡∏°‡∏ô‡∏π sidebar ---
menu = st.sidebar.selectbox("üìã ‡πÄ‡∏°‡∏ô‡∏π", ["‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç", "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡∏≠‡∏∞", "‡πÄ‡∏•‡∏Ç‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤", "‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏±‡∏ö", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î"])

# --- ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
if menu == "‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç":
    st.subheader("üìã ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏û‡∏¢‡∏à‡∏≤‡∏Å LINE")
    col1, col2 = st.columns([3, 1])
    with col1:
        text_input = st.text_area("‡∏ß‡∏≤‡∏á‡πÇ‡∏û‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà:", height=300)
    with col2:
        customer_name = st.text_input("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
        draw_date = st.date_input("üìÜ ‡∏á‡∏ß‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=today)

    # --- ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏û‡∏¢‡πÉ‡∏ô tickets.json ---
    if st.button("‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏û‡∏¢") and text_input and customer_name:
        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÇ‡∏û‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏û‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        lines = text_input.strip().splitlines()
        current_ticket = []

        for line in lines:
            line = line.strip()
            if not line:
                continue
            current_ticket.append(line)

        if current_ticket:
            standardized_text = standardize_ticket("\n".join(current_ticket))
            standardized_lines = standardized_text.strip().splitlines()
            calculated_total = calculate_total(standardized_lines)
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏¢
            declared_total_match = re.search(r"‡∏¢‡∏≠‡∏î\s+(\d+)", standardized_text, re.IGNORECASE)
            declared_total = int(declared_total_match.group(1)) if declared_total_match else 0
            if calculated_total != declared_total and calculated_total > 0:
                st.warning(f"‚ö†Ô∏è ‡πÇ‡∏û‡∏¢‡∏ú‡∏¥‡∏î: ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ ({calculated_total}) ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ({declared_total}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏¢‡∏Ç‡∏≠‡∏á {customer_name}")
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏û‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
                standardized_text = re.sub(r"‡∏¢‡∏≠‡∏î\s+\d+", f"‡∏¢‡∏≠‡∏î {calculated_total}", standardized_text, flags=re.IGNORECASE)
            ticket = {
                "‡πÇ‡∏û‡∏¢": standardized_text,
                "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤": customer_name,
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": draw_date.strftime("%d/%m/%Y"),
                "‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì": calculated_total
            }
            st.session_state.lotto_data.append(ticket)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á tickets.json
        with open("tickets.json", "w", encoding="utf-8") as f:
            json.dump(st.session_state.lotto_data, f, ensure_ascii=False, indent=2)
        st.success(f"‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏û‡∏¢‡∏Ç‡∏≠‡∏á {customer_name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        st.rerun()  # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏ô st.title

    # --- ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
    if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
        st.session_state.lotto_data = []
        with open("tickets.json", "w", encoding="utf-8") as f:
            json.dump([], f, ensure_ascii=False, indent=2)
        st.success("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô tickets.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        st.rerun()  # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏ô st.title

    # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏û‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
    if st.session_state.lotto_data:
        st.subheader("üìú ‡πÇ‡∏û‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ")
        for i, ticket in enumerate(st.session_state.lotto_data):
            col1, col2 = st.columns([9, 1])
            with col1:
                st.write(f"**‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤**: {ticket['‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤']} | **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà**: {ticket['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']} | **‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì**: {ticket['‡∏¢‡∏≠‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì']} ‡∏ö‡∏≤‡∏ó")
                st.code(ticket["‡πÇ‡∏û‡∏¢"], language="text")
            with col2:
                if st.button("üóëÔ∏è ‡∏•‡∏ö", key=f"delete_{i}"):
                    st.session_state.lotto_data.pop(i)
                    with open("tickets.json", "w", encoding="utf-8") as f:
                        json.dump(st.session_state.lotto_data, f, ensure_ascii=False, indent=2)
                    st.rerun()

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏ô‡∏π ---
if st.session_state.lotto_data:
    tickets = st.session_state.lotto_data
    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å tickets ‡∏´‡∏≤‡∏Å‡∏°‡∏µ ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ today
    if tickets:
        try:
            last_date_str = tickets[-1]["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"]
            draw_date = datetime.datetime.strptime(last_date_str, "%d/%m/%Y").date()
        except (KeyError, ValueError):
            draw_date = today
    else:
        draw_date = today

    if menu == "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡∏≠‡∏∞":
        st.subheader("üìä ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡∏≠‡∏∞")
        data = parse_tickets(tickets)
        if data:
            df = pd.DataFrame(data)
            # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞ 3 ‡∏ï‡∏±‡∏ß
            df_two_digits = df[df["‡πÄ‡∏•‡∏Ç"].str.len() == 2].groupby("‡πÄ‡∏•‡∏Ç")[["‡∏ö‡∏ô", "‡∏•‡πà‡∏≤‡∏á"]].sum().reset_index()
            df_two_digits['‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô'] = df_two_digits['‡∏ö‡∏ô'] * 70
            df_two_digits['‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á'] = df_two_digits['‡∏•‡πà‡∏≤‡∏á'] * 70
            df_two_digits['‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å'] = df_two_digits['‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô'] + df_two_digits['‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á']
            df_two_digits['‡∏ï‡∏¥‡∏î‡∏•‡∏ö'] = total_sales - df_two_digits['‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å']
            df_two_digits = df_two_digits.sort_values(by=['‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô', '‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á'], ascending=[False, False])

            df_three_digits = df[df["‡πÄ‡∏•‡∏Ç"].str.len() == 3].groupby("‡πÄ‡∏•‡∏Ç")[["‡∏ö‡∏ô", "‡∏•‡πà‡∏≤‡∏á", "‡πÇ‡∏ï‡πä‡∏î"]].sum().reset_index()
            df_three_digits['‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô'] = df_three_digits['‡∏ö‡∏ô'] * 500
            df_three_digits['‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á'] = df_three_digits['‡∏•‡πà‡∏≤‡∏á'] * 100
            df_three_digits['‡∏ñ‡∏π‡∏Å‡πÇ‡∏ï‡πä‡∏î'] = df_three_digits['‡πÇ‡∏ï‡πä‡∏î'] * 100
            df_three_digits['‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å'] = df_three_digits['‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô'] + df_three_digits['‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á'] + df_three_digits['‡∏ñ‡∏π‡∏Å‡πÇ‡∏ï‡πä‡∏î']
            df_three_digits['‡∏ï‡∏¥‡∏î‡∏•‡∏ö'] = total_sales - df_three_digits['‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å']
            df_three_digits = df_three_digits.sort_values(by=['‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô', '‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á', '‡∏ñ‡∏π‡∏Å‡πÇ‡∏ï‡πä‡∏î'], ascending=[False, False, False])

            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡πà‡∏á
            df_two_digits_send = df_two_digits.copy()
            df_two_digits_send['‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏ö‡∏ô'] = df_two_digits_send['‡∏ö‡∏ô'] * 0.5  # ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì 0.5 ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
            df_two_digits_send['‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏á'] = df_two_digits_send['‡∏•‡πà‡∏≤‡∏á'] * 0.5  # ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì 0.5 ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
            df_two_digits_send['‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡πÇ‡∏ï‡πä‡∏î'] = 0  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ï‡πä‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 2 ‡∏ï‡∏±‡∏ß
            df_two_digits_send['‡∏ï‡∏¥‡∏î‡∏•‡∏ö'] = total_sales - df_two_digits_send['‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å']

            df_three_digits_send = df_three_digits.copy()
            df_three_digits_send['‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏ö‡∏ô'] = df_three_digits_send['‡∏ö‡∏ô'] * 0.5  # ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì 0.5 ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
            df_three_digits_send['‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏á'] = df_three_digits_send['‡∏•‡πà‡∏≤‡∏á'] * 0.5  # ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì 0.5 ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
            df_three_digits_send['‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡πÇ‡∏ï‡πä‡∏î'] = df_three_digits_send['‡πÇ‡∏ï‡πä‡∏î'] * 0.5  # ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì 0.5 ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
            df_three_digits_send['‡∏ï‡∏¥‡∏î‡∏•‡∏ö'] = total_sales - df_three_digits_send['‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å']

            # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            st.markdown('<div class="table-container">', unsafe_allow_html=True)
            with st.container():
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown('<div class="table-section">', unsafe_allow_html=True)
                    st.markdown('<h3 class="two-digit-header">‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß</h3>', unsafe_allow_html=True)
                    if not df_two_digits.empty:
                        st.dataframe(df_two_digits[['‡πÄ‡∏•‡∏Ç', '‡∏ö‡∏ô', '‡∏•‡πà‡∏≤‡∏á', '‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô', '‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á', '‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å', '‡∏ï‡∏¥‡∏î‡∏•‡∏ö']], use_container_width=True)
                    st.markdown('<h3 class="two-digit-header">2 ‡∏ï‡∏±‡∏ß‡∏™‡πà‡∏á</h3>', unsafe_allow_html=True)
                    if not df_two_digits_send.empty:
                        st.dataframe(df_two_digits_send[['‡πÄ‡∏•‡∏Ç', '‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô', '‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á', '‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏ö‡∏ô', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏á', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡πÇ‡∏ï‡πä‡∏î', '‡∏ï‡∏¥‡∏î‡∏•‡∏ö']], use_container_width=True)
                        filename = f"2‡∏ï‡∏±‡∏ß‡∏™‡πà‡∏á_{draw_date.strftime('%d_%m_%Y')}.csv"
                        csv = df_two_digits_send[['‡πÄ‡∏•‡∏Ç', '‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô', '‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á', '‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏ö‡∏ô', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏á', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡πÇ‡∏ï‡πä‡∏î', '‡∏ï‡∏¥‡∏î‡∏•‡∏ö']].to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
                        st.download_button("üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î 2 ‡∏ï‡∏±‡∏ß‡∏™‡πà‡∏á", csv, file_name=filename, mime="text/csv")
                    st.markdown('</div>', unsafe_allow_html=True)
                with col2:
                    st.markdown('<div class="table-section">', unsafe_allow_html=True)
                    st.markdown('<h3 class="three-digit-header">‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß</h3>', unsafe_allow_html=True)
                    if not df_three_digits.empty:
                        st.dataframe(df_three_digits[['‡πÄ‡∏•‡∏Ç', '‡∏ö‡∏ô', '‡∏•‡πà‡∏≤‡∏á', '‡πÇ‡∏ï‡πä‡∏î', '‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô', '‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á', '‡∏ñ‡∏π‡∏Å‡πÇ‡∏ï‡πä‡∏î', '‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å', '‡∏ï‡∏¥‡∏î‡∏•‡∏ö']], use_container_width=True)
                    st.markdown('<h3 class="three-digit-header">3 ‡∏ï‡∏±‡∏ß‡∏™‡πà‡∏á</h3>', unsafe_allow_html=True)
                    if not df_three_digits_send.empty:
                        st.dataframe(df_three_digits_send[['‡πÄ‡∏•‡∏Ç', '‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô', '‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á', '‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏ö‡∏ô', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏á', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡πÇ‡∏ï‡πä‡∏î', '‡∏ï‡∏¥‡∏î‡∏•‡∏ö']], use_container_width=True)
                        filename = f"3‡∏ï‡∏±‡∏ß‡∏™‡πà‡∏á_{draw_date.strftime('%d_%m_%Y')}.csv"
                        csv = df_three_digits_send[['‡πÄ‡∏•‡∏Ç', '‡∏ñ‡∏π‡∏Å‡∏ö‡∏ô', '‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≤‡∏á', '‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏ö‡∏ô', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏á', '‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡πÇ‡∏ï‡πä‡∏î', '‡∏ï‡∏¥‡∏î‡∏•‡∏ö']].to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
                        st.download_button("üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î 3 ‡∏ï‡∏±‡∏ß‡∏™‡πà‡∏á", csv, file_name=filename, mime="text/csv")
                    st.markdown('</div>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏û‡∏¢")

    elif menu == "‡πÄ‡∏•‡∏Ç‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤":
        st.subheader("üì§ ‡πÄ‡∏•‡∏Ç‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤")
        data = parse_tickets(tickets)
        if data:
            df = pd.DataFrame(data)
            owners = df["‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"].unique()
            for owner in owners:
                owner_df = df[df["‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"] == owner]
                if not owner_df.empty:
                    st.write(f"### ‡πÄ‡∏à‡πâ‡∏≤‡∏°‡∏∑‡∏≠: {owner}")
                    grouped = owner_df.groupby("‡πÄ‡∏•‡∏Ç")[["‡∏ö‡∏ô", "‡∏•‡πà‡∏≤‡∏á", "‡πÇ‡∏ï‡πä‡∏î"]].sum().reset_index()
                    send_lines = []
                    for _, row in grouped.iterrows():
                        if row["‡∏ö‡∏ô"] > 0:
                            send_lines.append(f"{row['‡πÄ‡∏•‡∏Ç']}={row['‡∏ö‡∏ô']}")
                        if row["‡∏•‡πà‡∏≤‡∏á"] > 0:
                            send_lines.append(f"{row['‡πÄ‡∏•‡∏Ç']}={row['‡∏•‡πà‡∏≤‡∏á']}")
                        if row["‡πÇ‡∏ï‡πä‡∏î"] > 0:
                            send_lines.append(f"{row['‡πÄ‡∏•‡∏Ç']}t={row['‡πÇ‡∏ï‡πä‡∏î']}")
                    send_text = ", ".join(send_lines)
                    st.code(send_text, language="text")
                    st.dataframe(grouped, use_container_width=True)

                    # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
                    filename = f"‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤_{owner}_{draw_date.strftime('%d_%m_%Y')}.csv"
                    csv = grouped.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
                    st.download_button(f"üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏•‡∏Ç‡∏™‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤ {owner} ‡πÄ‡∏õ‡πá‡∏ô CSV", csv, file_name=filename, mime="text/csv")
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏û‡∏¢")

    elif menu == "‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏±‡∏ö":
        st.subheader("üî¢ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏±‡∏ö")
        data = parse_tickets(tickets)
        if data:
            df = pd.DataFrame(data)
            three_digit_numbers = df[df["‡πÄ‡∏•‡∏Ç"].str.len() == 3]["‡πÄ‡∏•‡∏Ç"].unique()
            if len(three_digit_numbers) > 0:
                perm_data = []
                for num in three_digit_numbers:
                    perms = generate_six_digit_permutations(num)
                    for perm in perms:
                        perm_data.append({"‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß": num, "‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏±‡∏ö": perm})
                perm_df = pd.DataFrame(perm_data)
                st.dataframe(perm_df, use_container_width=True)

                # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
                filename = f"‡πÄ‡∏•‡∏Ç6‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏±‡∏ö_{draw_date.strftime('%d_%m_%Y')}.csv"
                csv = perm_df.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
                st.download_button("üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏•‡∏Ç 6 ‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô CSV", csv, file_name=filename, mime="text/csv")
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç 3 ‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡πÇ‡∏û‡∏¢")
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏û‡∏¢")

    elif menu == "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î":
        st.subheader("üí∞ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î")
        data = parse_tickets(tickets)
        if data:
            df = pd.DataFrame(data)
            customer_summary = df.groupby("‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")[["‡∏ö‡∏ô", "‡∏•‡πà‡∏≤‡∏á", "‡πÇ‡∏ï‡πä‡∏î"]].sum().reset_index()
            customer_summary['‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°'] = customer_summary['‡∏ö‡∏ô'] + customer_summary['‡∏•‡πà‡∏≤‡∏á'] + customer_summary['‡πÇ‡∏ï‡πä‡∏î']
            st.dataframe(customer_summary, use_container_width=True)

            # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV
            filename = f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°_{draw_date.strftime('%d_%m_%Y')}.csv"
            csv = customer_summary.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
            st.download_button("üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô CSV", csv, file_name=filename, mime="text/csv")
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏û‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏û‡∏¢")
else:
    if menu != "‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç":
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏û‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ '‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç' ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")